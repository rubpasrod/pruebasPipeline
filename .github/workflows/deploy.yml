name: DVWA Pipeline

on:
  push:
    branches:
      - main

jobs:
  sast:
    name: Run SAST (Semgrep)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Semgrep
        run: |
          # Instalar Semgrep
          curl -sL https://github.com/returntocorp/semgrep/releases/download/v0.71.0/semgrep-v0.71.0-linux-amd64.tar.gz | tar -xz
          sudo mv semgrep*/semgrep /usr/local/bin/  # Mover el binario a /usr/local/bin

      - name: Run SAST with Semgrep
        run: |
          semgrep --config=p/r2c-security  # Ejecutar el análisis SAST con Semgrep (usando el preset de seguridad)


  sca:
    name: Run SCA (Snyk)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run SCA with Snyk
        run: |
          curl -sL https://github.com/snyk/snyk/releases/download/v1.901.0/snyk-linux.tar.gz | tar xz
          ./snyk test  # Ejecutar análisis de dependencias

  secrets:
    name: Run Secrets Scanning (TruffleHog)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run secrets scanning with TruffleHog
        run: |
          pip install truffleHog
          trufflehog --git-url https://github.com/rubpasrod/pruebasPipeline.git

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [sast, sca, secrets]  # Asegurarse de que los análisis previos hayan pasado
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t your-app .

      - name: Save Docker image to tarball
        run: |
          docker save your-app > your-app.tar

  pre-deployment:
    name: Pre-Deployment Security Checks
    runs-on: ubuntu-latest
    needs: build  # Asegurarse de que la construcción haya terminado antes de los chequeos de seguridad
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # DAST (Dynamic Application Security Testing) con OWASP ZAP
      - name: Run DAST with OWASP ZAP
        run: |
          docker run -v $(pwd):/src owasp/zap2docker-stable zap-full-scan.py -t http://your-app.local

      # Escaneo de imágenes Docker
      - name: Run Docker Image Scan with Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
          trivy image your-app

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: pre-deployment  # Asegurarse de que los chequeos de pre-deployment hayan pasado
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run unit tests
        run: |
          npm install
          npm test

      - name: Run integration tests
        run: |
          pytest tests/

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test  # Asegurarse de que no haya fallos en las pruebas
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy Docker image
        run: |
          docker push your-app
        if: ${{ success() }}  # Solo se ejecuta si todo ha pasado correctamente
