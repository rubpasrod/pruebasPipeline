name: DVWA Pipeline

on:
  push:
    branches:
      - main

jobs:
  pre-flight-sast:
    name: SAST (Semgrep)
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Semgrep (SAST)
        run: |
          docker run --rm -v $(pwd):/src returntocorp/semgrep semgrep --config=p/ci --json -o semgrep-results.json

      - name: Check for Critical Vulnerabilities (Semgrep)
        run: |
          if grep -q '"severity": "ERROR"' semgrep-results.json; then
            echo "Critical vulnerabilities found by Semgrep!"
            exit 1
          fi

      - name: Upload SAST Report
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results
          path: semgrep-results.json

  pre-flight-secrets:
    name: Run Secrets Scanning (TruffleHog)
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run TruffleHog Scan
        run: |
          docker run --rm -v $(pwd):/src trufflesecurity/trufflehog:latest \
          git file:///src --json > trufflehog-results.json

      - name: Upload Secrets Scan Report
        uses: actions/upload-artifact@v4
        with:
          name: trufflehog-results
          path: trufflehog-results.json


  build:
    name: Build DVWA Image
    runs-on: ubuntu-24.04
    needs: [pre-flight-sast, pre-flight-secrets]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug Cache Key
        run: |
          echo "Cache key: dvwa-image-${{ runner.os }}-${{ hashFiles('Dockerfile') }}"

      - name: Restore Cached Docker Image
        id: cache-docker
        uses: actions/cache@v3
        with:
          path: /tmp/dvwa-image
          key: dvwa-image-${{ runner.os }}-${{ hashFiles('Dockerfile') }}
          restore-keys: |
            dvwa-image-${{ runner.os }}-

      - name: Load Cached Image (if available)
        if: steps.cache-docker.outputs.cache-hit == 'true'
        run: docker load < /tmp/dvwa-image/dvwa.tar

      - name: Build Image
        if: steps.cache-docker.outputs.cache-hit != 'true'
        run: |
          docker build -t dvwa .
          mkdir -p /tmp/dvwa-image
          docker save dvwa > /tmp/dvwa-image/dvwa.tar

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dvwa-image
          path: /tmp/dvwa-image/


  test:
    name: Run Tests
    runs-on: ubuntu-24.04
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run unit tests
        run: |
          npm install
          npm test

      - name: Run integration tests
        run: |
          pytest tests/

  pre-deployment-dast:
    name: DAST (OWASP ZAP)
    runs-on: ubuntu-24.04
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: üì¶ Install dependencies
        run: npm install --legacy-peer-deps

      - name: üîß Create missing file
        run: mkdir -p .well-known/csaf && touch .well-known/csaf/provider-metadata.json

      - name: üîß Start Juice Shop
        run: |
          nohup npm start &
          sleep 60
      - name: üîç Check if Juice Shop is running
        run: |
          curl --retry 5 --retry-delay 10 --retry-connrefused -I http://localhost:3000
      - name: Run OWASP ZAP Scan (DAST)
        run: |
          docker ps
          docker pull zaproxy/zap-weekly
          docker run --rm -v $(pwd):/zap/wrk/:rw --user root --network="host" -t zaproxy/zap-weekly \
          zap-baseline.py -t http://localhost:3000 -g /zap/wrk/gen.conf -r zap-report.html -I
      - name: Upload DAST Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap-report.html


  pre-deployment-image-scan:
    name: Image Scanning (Trivy)
    runs-on: ubuntu-24.04
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy Image Scan
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $(pwd):/src aquasec/trivy your-app.tar

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-24.04
    needs: [pre-deployment-dast, pre-deployment-image-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy Docker image
        run: |
          echo "Desplegue"
