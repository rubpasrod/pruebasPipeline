name: DVWA Pipeline

on:
  push:
    branches:
      - main

jobs:
  pre-flight-sast:
    name: SAST (Semgrep)
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Semgrep (SAST)
        run: |
          docker run --rm -v $(pwd):/src returntocorp/semgrep semgrep --config=p/ci --json -o semgrep-results.json

      - name: Check for Critical Vulnerabilities (Semgrep)
        run: |
          if grep -q '"severity": "ERROR"' semgrep-results.json; then
            echo "Critical vulnerabilities found by Semgrep!"
            exit 1
          fi

      - name: Upload SAST Report
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results
          path: semgrep-results.json

  pre-flight-secrets:
    name: Run Secrets Scanning (TruffleHog)
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run TruffleHog Scan
        run: |
          docker run --rm -v $(pwd):/src trufflesecurity/trufflehog:latest \
          git file:///src --json > trufflehog-results.json

      - name: Upload Secrets Scan Report
        uses: actions/upload-artifact@v4
        with:
          name: trufflehog-results
          path: trufflehog-results.json

  pre-flight-sca:
    name: Run SCA (OWASP Dependency-Check)
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run OWASP Dependency-Check
        run: |
          docker run --rm -v $(pwd):/src owasp/dependency-check:latest \
          --scan /src --format JSON --project dvwa -o /src/dependency-check-report.json

      - name: Check for Critical Vulnerabilities (OWASP Dependency-Check)
        run: |
          if grep -q '"severity": "CRITICAL"' dependency-check-report.json; then
            echo "Critical vulnerabilities found by OWASP Dependency-Check!"
            exit 1
          fi

      - name: Upload SCA Report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: dependency-check-report.json


  build:
    name: Build DVWA Image
    runs-on: ubuntu-24.04
    needs: [pre-flight-sast, pre-flight-secrets]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug Cache Key
        run: |
          echo "Cache key: dvwa-image-${{ runner.os }}-${{ hashFiles('Dockerfile') }}"

      - name: Restore Cached Docker Image
        id: cache-docker
        uses: actions/cache@v3
        with:
          path: /tmp/dvwa-image
          key: dvwa-image-${{ runner.os }}-${{ hashFiles('Dockerfile') }}
          restore-keys: |
            dvwa-image-${{ runner.os }}-

      - name: Load Cached Image (if available)
        if: steps.cache-docker.outputs.cache-hit == 'true'
        run: docker load < /tmp/dvwa-image/dvwa.tar

      - name: Build Image
        if: steps.cache-docker.outputs.cache-hit != 'true'
        run: |
          docker build -t dvwa . 
          mkdir -p /tmp/dvwa-image
          docker save dvwa > /tmp/dvwa-image/dvwa.tar

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dvwa-image
          path: /tmp/dvwa-image/


  test:
    name: Run DVWA Tests
    runs-on: ubuntu-24.04
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y python3-pip curl jq
          pip install pytest requests

      - name: Run URL Tests
        run: |
          cd /home/runner/work/pruebasPipeline/pruebasPipeline/tests
          python3 -m pytest -s test_url.py || echo "Algunas pruebas fallaron, revisa los logs"



  pre-deployment-dast:
    name: DAST (OWASP ZAP) for DVWA
    runs-on: ubuntu-24.04
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 📦 Install dependencies
        run: sudo apt update && sudo apt install -y curl

      - name: Download DVWA Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: dvwa-image
          path: /tmp/dvwa-image

      - name: 🔧 Start DVWA from Build Image
        run: |
          docker load -i /tmp/dvwa-image/dvwa.tar 
          docker run --name dvwa -d -p 80:80 dvwa 
          sleep 15 

      - name: 🔍 Check if DVWA is running
        run: |
          curl --retry 5 --retry-delay 10 --retry-connrefused -I http://localhost

      - name: Run OWASP ZAP Scan (DAST)
        run: |
          docker ps 
          docker pull zaproxy/zap-weekly 
          docker run --rm -v $(pwd):/zap/wrk/:rw --user root --network="host" -t zaproxy/zap-weekly \
          zap-baseline.py -t http://localhost -g /zap/wrk/gen.conf -r zap-report.html -I

      - name: Upload DAST Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap-report.html



  pre-deployment-image-scan:
    name: Run Trivy (Image Scan)
    runs-on: ubuntu-24.04
    needs: test
    steps:
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -cs) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Scan DVWA with Trivy
        run: |
          echo "🔍 Escaneando la imagen DVWA con Trivy..."
          trivy image --exit-code 0 --severity HIGH,CRITICAL vulnerables/web-dvwa | tee trivy_results_web-dvwa.txt
        continue-on-error: true 

      - name: Scan MySQL with Trivy
        run: |
          echo "🔍 Escaneando la imagen MySQL con Trivy..."
          trivy image --exit-code 0 --severity HIGH,CRITICAL mysql:5.7 | tee trivy_results_mysql.txt
        continue-on-error: true 

      - name: Upload Trivy Reports
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: trivy_results_*.txt

  pre-deployment-kubeval:
    name: Kubeval (Kubernetes Manifests)
    runs-on: ubuntu-24.04
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install kubeval
        run: |
          wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
          tar xf kubeval-linux-amd64.tar.gz
          sudo mv kubeval /usr/local/bin/

      - name: Validate Kubernetes YAML files
        run: |
          kubeval --strict manifests/*.yaml > kubeval-results.txt
        continue-on-error: true  

      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: kubeval-results
          path: kubeval-results.txt

  pre-deployment-kubesec:
    name: Kubesec (Kubernetes Security)
    runs-on: ubuntu-24.04
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Kubesec
        run: |
          wget https://github.com/controlplaneio/kubesec/releases/download/v2.14.2/kubesec_linux_amd64.tar.gz
          tar -xvf kubesec_linux_amd64.tar.gz
          chmod +x kubesec
          sudo mv kubesec /usr/local/bin/
          
      - name: Security scan with kubesec
        run: |
          find manifests/ -name "*.yaml" -type f -exec kubesec scan {} \; >> kubesec-results.txt
        continue-on-error: true

      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: kubesec-results
          path: kubesec-results.txt

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-24.04
    needs: [pre-deployment-dast, pre-deployment-image-scan, pre-deployment-kubeval, pre-deployment-kubesec]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy Docker image
        run: |
          echo "Despliegue"
