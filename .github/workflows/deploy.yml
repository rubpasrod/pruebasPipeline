name: DVWA Pipeline

on:
  push:
    branches:
      - main

jobs:
  sast:
    name: SAST (Semgrep)
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Semgrep (SAST)
        run: |
          docker run --rm -v $(pwd):/src returntocorp/semgrep semgrep --config=p/ci --json -o semgrep-results.json

      - name: Check for Critical Vulnerabilities (Semgrep)
        run: |
          if grep -q '"severity": "ERROR"' semgrep-results.json; then
            echo "Critical vulnerabilities found by Semgrep!"
            exit 1
          fi

      - name: Upload SAST Report
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results
          path: semgrep-results.json

  secrets:
    name: Run Secrets Scanning (TruffleHog)
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run secrets scanning with TruffleHog
        run: |
          pip install truffleHog
          trufflehog --repo-path https://github.com/rubpasrod/pruebasPipeline.git --json > trufflehog-results.json

      - name: Upload Secrets Scan Report
        uses: actions/upload-artifact@v4
        with:
          name: trufflehog-results
          path: trufflehog-results.json

  build:
    name: Build Application
    runs-on: ubuntu-24.04
    needs: [sast, secrets]  # Asegurarse de que los análisis previos hayan pasado
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t your-app .

      - name: Save Docker image to tarball
        run: |
          docker save your-app > your-app.tar

  pre-deployment:
    name: Pre-Deployment Security Checks
    runs-on: ubuntu-24.04
    needs: build  # Asegurarse de que la construcción haya terminado antes de los chequeos de seguridad
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # DAST (Dynamic Application Security Testing) con OWASP ZAP
      - name: Run DAST with OWASP ZAP
        run: |
          docker run -v $(pwd):/src owasp/zap2docker-stable zap-full-scan.py -t http://your-app.local

      # Escaneo de imágenes Docker
      - name: Run Docker Image Scan with Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
          trivy image your-app

  test:
    name: Run Tests
    runs-on: ubuntu-24.04
    needs: pre-deployment  # Asegurarse de que los chequeos de pre-deployment hayan pasado
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run unit tests
        run: |
          npm install
          npm test

      - name: Run integration tests
        run: |
          pytest tests/

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-24.04
    needs: test  # Asegurarse de que no haya fallos en las pruebas
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy Docker image
        run: |
          docker push your-app
        if: ${{ success() }}  # Solo se ejecuta si todo ha pasado correctamente
